AWSTemplateFormatVersion: '2010-09-09'
Description: 'Universal Auth A2A MCP Lambda Function'

Conditions:
  HasVersion: !Not [!Equals [!Ref FunctionZipVersion, ""]]
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  NoCustomDomain: !Equals [!Ref DomainName, ""]

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging, prod)
    AllowedValues: [staging, prod]
  Project:
    Type: String
    Default: example
    Description: Project name (example, venture, volunteer)
  FunctionZipVersion:
    Type: String
    Description: S3 object version for the function zip file
    Default: ""
  FoundationDeploymentBucket:
    Type: String
    Description: S3 bucket name from foundation stack
    Default: ""
  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name for the HTTP service (optional)
  CertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN for custom domain (required if DomainName is provided)

Resources:
  # DynamoDB Table for Venture profiles
  VenturesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}-ventures'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: kind
          AttributeType: S
        - AttributeName: updated
          AttributeType: S
        - AttributeName: subjectDid
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: KindIndex
          KeySchema:
            - AttributeName: kind
              KeyType: HASH
            - AttributeName: updated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: SubjectIndex
          KeySchema:
            - AttributeName: subjectDid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # DynamoDB Table for Wallets
  WalletsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}-wallets'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ownerDid
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: OwnerIndex
          KeySchema:
            - AttributeName: ownerDid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # DynamoDB Table for Reputations
  ReputationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}-reputations'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: reporterDid
          AttributeType: S
        - AttributeName: subjectDid
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ReporterIndex
          KeySchema:
            - AttributeName: reporterDid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: SubjectIndex
          KeySchema:
            - AttributeName: subjectDid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # DynamoDB Table for Community profiles
  CommunityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}-community-profiles'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: kind
          AttributeType: S
        - AttributeName: updated
          AttributeType: S
        - AttributeName: subjectDid
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: KindIndex
          KeySchema:
            - AttributeName: kind
              KeyType: HASH
            - AttributeName: updated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: SubjectIndex
          KeySchema:
            - AttributeName: subjectDid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # Lambda Function
  A2aMcpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}'
      Runtime: nodejs22.x
      Handler: dist/index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref FoundationDeploymentBucket
        S3Key: !Sub '${Project}/function.zip'
        S3ObjectVersion: !If [HasVersion, !Ref FunctionZipVersion, !Ref AWS::NoValue]
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          NODE_ENV: !Ref Environment
          NODE_OPTIONS: "--enable-source-maps"
          VALKEY_ENDPOINT: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyCacheEndpoint'
          VALKEY_PORT: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyCachePort'
          VALKEY_PASSWORD_SECRET_ARN: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyPasswordSecretArn'
          DYNAMODB_VENTURE_PROFILES_TABLE_NAME: !Ref VenturesTable
          DYNAMODB_WALLETS_TABLE_NAME: !Ref WalletsTable
          DYNAMODB_REPUTATIONS_TABLE_NAME: !Ref ReputationsTable
          DYNAMODB_COMMUNITY_PROFILES_TABLE_NAME: !Ref CommunityTable
          SERVICE_URL: !If 
            - HasCustomDomain
            - !Sub 'https://${DomainName}'
            - !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
      Timeout: 30
      MemorySize: 256
      VpcConfig:
        SubnetIds:
          - !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-PrivateSubnet1'
          - !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-PrivateSubnet2'
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'agentic-service-a2a-mcp-lambda-${Project}-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub
                  - 'arn:aws:s3:::${BucketName}/${Project}/*'
                  - BucketName: !Ref FoundationDeploymentBucket
                    Project: !Ref Project
        - PolicyName: OutboundHttpAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: ElastiCacheAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeCacheSubnetGroups
                Resource: '*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !ImportValue 
                  Fn::Sub: 'agentic-foundation-${Environment}-ValkeyPasswordSecretArn'
        - PolicyName: VPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: '*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource: 
                  - !GetAtt VenturesTable.Arn
                  - !Sub '${VenturesTable.Arn}/index/*'
                  - !GetAtt WalletsTable.Arn
                  - !Sub '${WalletsTable.Arn}/index/*'
                  - !GetAtt ReputationsTable.Arn
                  - !Sub '${ReputationsTable.Arn}/index/*'
                  - !GetAtt CommunityTable.Arn
                  - !Sub '${CommunityTable.Arn}/index/*'

  # HTTP API Gateway
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'agentic-service-a2a-mcp-api-${Project}-${Environment}'
      Description: 'HTTP API Gateway for Universal Auth A2A MCP Lambda Function'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
        AllowOrigins:
          - '*'
        ExposeHeaders:
          - 'www-authenticate'
        MaxAge: 86400

  # HTTP API Integration
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${A2aMcpFunction.Arn}/invocations'
      PayloadFormatVersion: '1.0'

  # HTTP API Route for all paths
  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub 'integrations/${HttpApiIntegration}'

  # HTTP API Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Environment
      AutoDeploy: true

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function to access Valkey cache and VPC endpoints
      VpcId: !ImportValue 
        Fn::Sub: 'agentic-foundation-${Environment}-DefaultVpc'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          DestinationSecurityGroupId: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeySecurityGroupId'
          Description: Allow Lambda to access Valkey cache
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: Allow Lambda to access VPC endpoints
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow Lambda to access AWS services (HTTPS)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow Lambda to access AWS services (HTTP)
      Tags:
        - Key: Name
          Value: !Sub 'agentic-service-a2a-mcp-lambda-sg-${Project}-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Lambda Permission for HTTP API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref A2aMcpFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # API Gateway Domain Mapping (conditional)
  ApiDomainMapping:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  # API Gateway API Mapping (conditional)
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: HasCustomDomain
    Properties:
      ApiId: !Ref HttpApi
      DomainName: !Ref ApiDomainMapping
      Stage: !Ref HttpApiStage

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/agentic-service-a2a-mcp-${Project}-${Environment}'
      RetentionInDays: 14

Outputs:
  HttpApiUrl:
    Description: 'HTTP API Gateway URL'
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-HttpApiUrl'

  CustomDomainUrl:
    Description: 'Custom Domain URL'
    Value: !Sub 'https://${DomainName}'
    Condition: HasCustomDomain
    Export:
      Name: !Sub '${AWS::StackName}-CustomDomainUrl'

  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt A2aMcpFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref A2aMcpFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  VenturesTableName:
    Description: 'Ventures DynamoDB Table Name'
    Value: !Ref VenturesTable
    Export:
      Name: !Sub '${AWS::StackName}-VenturesTableName'

  VenturesTableArn:
    Description: 'Ventures DynamoDB Table ARN'
    Value: !GetAtt VenturesTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VenturesTableArn'

  WalletsTableName:
    Description: 'Wallets DynamoDB Table Name'
    Value: !Ref WalletsTable
    Export:
      Name: !Sub '${AWS::StackName}-WalletsTableName'

  WalletsTableArn:
    Description: 'Wallets DynamoDB Table ARN'
    Value: !GetAtt WalletsTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WalletsTableArn'

  ReputationsTableName:
    Description: 'Reputations DynamoDB Table Name'
    Value: !Ref ReputationsTable
    Export:
      Name: !Sub '${AWS::StackName}-ReputationsTableName'

  ReputationsTableArn:
    Description: 'Reputations DynamoDB Table ARN'
    Value: !GetAtt ReputationsTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ReputationsTableArn'

  CommunityTableName:
    Description: 'Community DynamoDB Table Name'
    Value: !Ref CommunityTable
    Export:
      Name: !Sub '${AWS::StackName}-CommunityTableName'

  CommunityTableArn:
    Description: 'Community DynamoDB Table ARN'
    Value: !GetAtt CommunityTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CommunityTableArn'

  ServiceUrl:
    Description: 'Service URL (API Gateway or Custom Domain)'
    Value: !If 
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceUrl'



 