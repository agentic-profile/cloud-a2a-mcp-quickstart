AWSTemplateFormatVersion: '2010-09-09'
Description: 'Website Infrastructure for Agentic - S3 and CloudFront Setup'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging, prod)
    AllowedValues: [staging, prod]
  Project:
    Type: String
    Default: example
    Description: Project name (example, venture, volunteer)
  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name for the website (optional)
  CertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN for custom domain (required if DomainName is provided)

Resources:
  # S3 Bucket for Website Content
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: !Sub 'agentic-website-${Project}-${AWS::AccountId}-${Environment}-${AWS::StackId}'
      # Let AWS generate a unique bucket name to avoid conflicts
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases: !If 
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref 'AWS::NoValue'
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !Sub '${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        CacheBehaviors:
          - PathPattern: "index.html"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 400
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

  # S3 Bucket Policy for Static Website Hosting
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebsiteBucket
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPublicReadAccess
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # CloudWatch Log Group for CloudFront
  CloudFrontLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cloudfront/agentic-website-${Project}-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  WebsiteBucketName:
    Description: 'S3 Bucket Name for Website Content'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketName'

  WebsiteBucketArn:
    Description: 'S3 Bucket ARN for Website Content'
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketArn'

  WebsiteBucketUrl:
    Description: 'S3 Static Website URL'
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketUrl'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  WebsiteUrl:
    Description: 'Website URL'
    Value: !If
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteUrl'
